{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","handleOnClick","event","x","i","document","querySelectorAll","length","target","paused","play","pause","handleOnClickMute","vid","previousSibling","muted","classList","remove","add","handleOnClickMuteAll","className","class","id","onClick","this","src","process","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,kC,qICyF1BC,G,uNA9EfC,cAAgB,SAACC,GAGf,IAAIC,EAAGC,EAEP,IADAD,EAAIE,SAASC,iBAAiB,SACzBF,EAAI,EAAGA,EAAID,EAAEI,OAAQH,IAErBF,EAAMM,QAAUL,EAAEC,GACfD,EAAEC,GAAGK,OACPP,EAAMM,OAAOE,OAEbR,EAAMM,OAAOG,QAGfR,EAAEC,GAAGO,S,EASXC,kBAAoB,SAACV,GACnB,IAAIW,EAAMX,EAAMM,OAAOM,gBACN,GAAbD,EAAIE,OACNF,EAAIE,OAAQ,EACZb,EAAMM,OAAOQ,UAAUC,OAAO,gBAE9BJ,EAAIE,OAAQ,EACZb,EAAMM,OAAOQ,UAAUE,IAAI,gB,EAI/BC,qBAAuB,SAACjB,GACtB,IAAIC,EAAGC,EAEP,IADAD,EAAIE,SAASC,iBAAiB,SACzBF,EAAI,EAAGA,EAAID,EAAEI,OAAQH,IACxBD,EAAEC,GAAGW,OAAS,G,wEAOhB,OACE,yBAAKK,UAAU,OACb,yBAAKC,MAAM,aACT,wBAAIA,MAAM,eAAV,oBAEA,yBAAKA,MAAM,iBACT,yBAAKA,MAAM,8BAET,yBAAKA,MAAM,kBAAkBC,GAAG,UAEhC,2BAAOA,GAAG,SAASC,QAASC,KAAKvB,eAC7B,4BAAQwB,IAAKC,2CAAqDC,KAAK,cAD3E,oFAIA,yBAAKN,MAAM,OAAOE,QAASC,KAAKZ,qBAGhC,yBAAKS,MAAM,kBAAkBC,GAAG,UAC9B,2BAAOA,GAAG,SAASC,QAASC,KAAKvB,eAC/B,4BAAQwB,IAAKC,2CAAqDC,KAAK,cADzE,oFAGA,yBAAKN,MAAM,OAAOE,QAASC,KAAKZ,sBAKpC,yBAAKS,MAAM,WAAU,uBAAIE,QAASC,KAAKL,sBAAsB,uBAAGE,MAAM,6B,GA3EhEO,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAAS+B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d0af5cb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\n\n\nclass App extends Component {\n\n\n\n  handleOnClick = (event) => {\n\n\n    let x, i;\n    x = document.querySelectorAll(\"video\");\n    for (i = 0; i < x.length; i++) {\n      \n      if(event.target == x[i]){\n        if (x[i].paused ){\n          event.target.play();\n        } else {\n          event.target.pause();\n        }\n      }else{\n        x[i].pause();\n      }\n\n     \n\n    }\n\n  };\n\n  handleOnClickMute = (event) => {\n    let vid = event.target.previousSibling;\n    if (vid.muted == true) {\n      vid.muted = false;\n      event.target.classList.remove('removeMute');\n    } else {\n      vid.muted = true;\n      event.target.classList.add('removeMute');\n    }\n  };\n\n  handleOnClickMuteAll = (event) => {\n    let x, i;\n    x = document.querySelectorAll(\"video\");\n    for (i = 0; i < x.length; i++) {\n      x[i].muted  = true;\n    }\n\n  };\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div class=\"container\">\n          <h3 class=\"text-center\">Video Controller</h3>\n\n          <div class=\"video-content\">\n            <div class=\"row justify-content-center\">\n\n              <div class=\"col-12 col-md-4\" id=\"video1\">\n\n              <video id=\"videoC\" onClick={this.handleOnClick}>\n                  <source src={process.env.PUBLIC_URL + '/assets/video/video1.mp4'} type=\"video/mp4\" />Your browser does not support the video tag. I suggest you upgrade your browser.\n              </video>\n\n              <div class=\"mute\" onClick={this.handleOnClickMute}></div>\n              </div>\n\n              <div class=\"col-12 col-md-4\" id=\"video2\">\n                <video id=\"videoC\" onClick={this.handleOnClick}>\n                  <source src={process.env.PUBLIC_URL + '/assets/video/video2.mp4'} type=\"video/mp4\" />Your browser does not support the video tag. I suggest you upgrade your browser.\n              </video>\n                <div class=\"mute\" onClick={this.handleOnClickMute}></div>\n              </div>\n\n            </div>\n\n            <div class=\"muteAll\"><a  onClick={this.handleOnClickMuteAll}><i class=\"fa fa-volume-up\"></i></a></div>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n} export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}